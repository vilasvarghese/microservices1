Pick up collaboration service
	Since this service is now exposed on eureka.
	Start eureka and dependent services
	Seed the data using 
		http://localhost:8091/seedData
	Hit the end point
		http://localhost:8090/catalog/companies/Hexaware
	
	This should now be working.
	Bring down any service let's say rating
	
	Refresh
		http://localhost:8090/catalog/companies/Hexaware
	Now this would fail
	
	Let's add a circuit breaker
	
Add the following in pom.xml
------------------------------------------------------------------------
N.B:
	#Ensure to retain version even if you are getting comments.
	#Without this failure rate may not get updated.

		<!-- https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-circuitbreaker -->
		<dependency>
		    <groupId>io.github.resilience4j</groupId>
		    <artifactId>resilience4j-spring-boot2</artifactId>
			<version>1.7.1</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-actuator</artifactId>
		    <version>2.2.1.RELEASE</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		    <version>2.2.6.RELEASE</version>
		</dependency>

------------------------------------------------------------------------


Update the collaboration controller as follows

------------------------------------------------------------------------
1. Add an annotation to the method were we wan't to induce circuit breaker
	@CircuitBreaker(name = "COMPANY-RATING-COLLABORATION", fallbackMethod = "fallbackEmpRating")

	Add
	import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

2. 	Add a fallback method as mentioned below.
	The signature of this method should be same as what initial method.
	name of this method should be same as what is defined in fallbackMethod.
	An additional Exception is passed to this class.
		
		We can either return an error or return a cached response.
		
	public List<EmployeeRatingCatalog> fallbackEmpRating(@PathVariable String companyName, Exception e){
		List<EmployeeRatingCatalog> employeesRatingList = new ArrayList<EmployeeRatingCatalog>();
		employeesRatingList.add(
				new EmployeeRatingCatalog(
						new Employee(1, "Vilas", 10000, "Oracle"), new Rating("Vilas", 5)));
		
		return employeesRatingList;
	}


------------------------------------------------------------------------
Restart the service and hit the end point
		http://localhost:8090/catalog/companies/Hexaware


Now let's learn half opened state
---------------------------------

Add the following properties in application.yml of collaboration service.
-----------------------------------------------------
#To understand what is happening below.
#Documentation reference: https://resilience4j.readme.io/docs/circuitbreaker

#Reference: https://github.com/resilience4j/resilience4j-spring-boot2-demo/blob/master/src/main/resources/application.yml
resilience4j.circuitbreaker:
  configs:
    default:                       #Instead of this we can use instances: and mention a particular microservice name. The name should match with the name in @CircuitBreaker
      registerHealthIndicator: true
      eventConsumerBufferSize: 10
      automaticTransitionFromOpenToHalfOpenEnabled: true #Start short circuiting for 50% requests. Don't even make calls.'
      failureRateThreshold: 50      #Maximum failure rate threashhold in percentage. After this short circuiting will start.
      minimumNumberOfCalls: 5       #After so many call failure, the short circuiting calculation would start.
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowSize: 10
      waitDurationInOpenState: 5s
      slidingWindowType: COUNT_BASED
# Once you start recording an exception - those exceptions won't be considered as failures
#      recordExceptions:
#        - org.springframework.web.client.HttpServerErrorException
#        - java.util.concurrent.TimeoutException
#        - java.io.IOException

#Below are the actuator related configuration. Without the below configuration actuator and fallback would work but we will not be able to see it up and running when we hit the endpoint actuator/health

management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
-----------------------------------------------------------------	  
Bounce the collaboration service


	Now it should be responding with the cached response - hard coded in this case.
	
	Try hitting the following from postman.
	http://localhost:8090/actuator/health
	
	Refresh below url 5+ of times
	http://localhost:8090/catalog/companies/Hexaware
	
	See that "failedCalls":  keeps increasing
	
	Once this crosses 5, the circuit would be HALF_OPEN.