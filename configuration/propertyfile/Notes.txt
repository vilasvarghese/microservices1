Reference 1: 
	https://docs.spring.io/spring-boot/docs/2.1.8.RELEASE/reference/html/boot-features-external-config.html
	https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config

1. Create a web spring boot application
2. Define few properties in key=value pairs in application.properties.
3. Autowire values using @Value annotation.
		@Value("${key}")
		
		
----------------------------------------------------	
Get the war file.

Steps to get the war file can be found in 
https://crunchify.com/how-to-create-a-war-file-from-eclipse-using-maven-plugin-apache-maven-war-plugin-usage/

	Define <packaging>war</packaging> under version definition.
	
	Right click -> Run As -> Maven build -> clean install
			OR
	mvn clean install
				OR

4. Refer a property from another property in the property file.
	e.g.
	country.message = Welcome to ${country.name}

5. Go to the folder where your .war file is
	java -jar <your service build>.war / .jar
	
	http://localhost:8080/hello
	http://localhost:8080/hello1
	
	
------------------------------------------------------------------------------------	
	If you don't know where is your war/jar file, then execute mvn clean install 
------------------------------------------------------------------------------------	


--------------------------------------------------	
Different ways to override the values
-------------------------------------
a. 	cd to the folder where you have the war.

	->C:\Users\vilas\.m2\repository\com\config\configservice\0.0.1-SNAPSHOT
	
	->java -jar -DfirstName=Ullas configservice-0.0.1-SNAPSHOT.war
	
	http://localhost:8080/hello
	http://localhost:8080/hello1
	http://localhost:8080/stateList

b. Have an application.properties in the same folder as where you war/jar is.

	Create a new application.properties file and define equivalent of each properties
	java -jar <your file>.jar/.war

		It will override the application.properties value with what is the there on the local machine.
		

6. Defining a default value
	a. Remove a porperty from application.properties inside the service 
		(not in the location where .war is present)
		and try to start the application .
		or build using maven
			
			It fails
		
	b. But look at the defaultValue variable in Property2Controller.
		There is no equivalent for this in application.properties
	
7. List of values
	Look at the stateList
		A string got automatically converted to list.
		
		Property3Controller
		http://localhost:8080/stateList
		
8. Expression
	Remember sPel from the architecture diagram.
	You can define a value itself as key value pairs
	Define it like below 
		electionRule={age: 18, citizen: 'Indian'}
	While you use
		@Value("#{${electionRule}}") - it can get evaluated to a Map.
	We can return/use this Map
	
	Refer Property4Controller.java



-------------------------------
ConfigurationProperties

Let's say you have properties like

db.connection={jdb:odbc:thin,192.168.1.2,username: 'scott': password: tiger'}
db.host=192.168.132.123
db.port=1234

All properties under this can be directly applied to a Bean
	As can be seen in DBProperties.java
	
Such a file should have two configurations
	@Configuration
	@ConfigurationProperties("db")
	
This can be directly autowired (not proertified) into a class as can be seen in 
	ConfigurationPropertyController.java
	
-------------------------------

Such values can be directly seen by adding an actuator

include below dependency in the pom.xml

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	
	
Add below property in application.properties

	management.endpoints.web.exposure.include=*

Restart and go to 
	http://localhost:8080/actuator/configprops
	
	Copy paste this file and Search for "db"
	


-------------------------------

Create our own profile
----------------------
Spring can support multiple profiles

1. Copy paste and create a new application-dev.properties
Modify some of the properties

2. Add the below in application.properties
spring.profiles.active: dev

Restart the server

Hit the various end points.



Another way to inject profile is as follows.
mvn install 
java -jar configservice-0.0.1-SNAPSHOT.war --spring.profiles.active=dev


-------------------------------------------


Config Server
-------------
Create a new spring boot config server project

yaml file would like below

----------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.configserver</groupId>
	<artifactId>configserver</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>configserver</name>
	<description>Instructions For Config Server service</description>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2020.0.1</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
--------------------------------------------------------------

Add @EnableConfigServer in application file.

Add the following porperty in application.properties

spring.cloud.config.server.git.uri=D:\\conig

server.port=8888

-----------------
Create a new directory
Copy the application.properties file from server in this project inside
There are configurations in it.. So copying any application.properties may not solve the problem.
do 
	git init
	git add *
	git commit -m "my application.properties" 
	
	
	
Start the server	
	
URL:
	http://localhost:8888/<file>/<profile>
	
	e.g.
	http://localhost:8888/application/default
	
	
-------------------------

Create a new Spring config client and web project
Add actuator also to it.

Add following to the property file
spring.cloud.config.uri:http://localhost:8888
server.port = 9091
management.endpoints.web.exposure.include = "*"


Copy the DbProperties class from service.
Try to use a value of the same in controller.




---------------------------------
client
---------------------------------

Create a spring boot config client project with dependencies mentioned in the pom.xml
why?
Refer https://stackoverflow.com/questions/65430810/config-client-is-not-working-in-spring-boot

pom.xml would look as follows
-------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.configclient</groupId>
	<artifactId>configclient</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>configclient</name>
	<description>Instructions For Config Client service</description>
	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>2020.0.1</spring-cloud.version>
		<!--spring-cloud.version>Hoxton.SR1</spring-cloud.version-->
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
		  <groupId>org.springframework.cloud</groupId>
		  <artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>



------------------


Create a bootstrap.yml file as follows
------------------
spring:
  application:
    name: configclient
  profiles:
    active: default
  cloud:
    config:
      uri: http://localhost:8888
------------------

application.properties would look as follows

server.port=8091

Now we can read the properties as if it is a local application.properties 

implement java code to do the same.

Reference 
D:\PraiseTheLord\HSBGInfotech\Others\vilas\microservices1\configuration\propertyfile

	configserver 
	configclient




Further read 
Securing config server
	https://medium.com/@susindaperera/securing-spring-cloud-config-server-eac7b46f3e41


java -jar .\target\rating-0.0.1-SNAPSHOT.jar --server.port=8095